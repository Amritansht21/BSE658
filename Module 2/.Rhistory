# Importing covid testing data
covid_testdata <- read.csv('StatewiseTestingDetails.csv')
# Using head function to view first few rows of the data
head(covid_testdata)
# Using nrow()  and ncol() base R functions to view the number of rows and columns for the data
nrow(covid_testdata)
ncol(covid_testdata)
sum(is.na(covid_testdata$Negative))
install.packages("tidyverse")
library(tidyverse)
# converting the data to tibble
covid_data <- as_tibble(covid_testdata)
covid_data
covid_data <- read_csv('StatewiseTestingDetails.csv')
covid_data
library(dplyr)
filter(covid_data, Positive > 5000)
filter(covid_data, State == 'Uttarakhand')
filter(covid_data, State == 'Uttarakhand' & Positive > 5000)
select(covid_data, State, TotalSamples)
select(covid_data, c(State, TotalSamples))
select(covid_data, -Negative)
select(covid_data, State:Positive)
rename(covid_data, Neg = Negative)
covid_data
newdata <- mutate(covid_data, prop = Positive/TotalSamples)
newdata
arrange(covid_data, Date)
arrange(covid_data, desc(Positive))
write.csv(covid_data, file= "covid_data_copy.csv")
covid_data <- read.csv(file= "covid_data_copy.csv")
getwd() #current directory
list.files() # list all files in the directory
covid_data %>%
filter(State == 'Mizoram')
covid_data %>%
filter(State == "Mizoram") %>%
select(Date, Positive)
covid_data %>%
filter(State == "Mizoram") %>%
select(Date, Positive) ->
new_df
load("C:/Users/amrit/Downloads/SEMESTER 7/BSE658 STATISTICS FOR MODERN BIOLOGY/BSE658/Module 2/.RData")
# Importing covid testing data
covid_testdata <- read.csv('StatewiseTestingDetails.csv')
# Using head function to view first few rows of the data
head(covid_testdata)
# Using nrow()  and ncol() base R functions to view the number of rows and columns for the data
nrow(covid_testdata)
ncol(covid_testdata)
sum(is.na(covid_testdata$Negative))
#install.packages("tidyverse")
library(tidyverse)
# converting the data to tibble
covid_data <- as_tibble(covid_testdata)
covid_data
covid_data <- read_csv('StatewiseTestingDetails.csv')
covid_data
library(dplyr)
filter(covid_data, Positive > 5000)
filter(covid_data, State == 'Uttarakhand')
filter(covid_data, State == 'Uttarakhand' & Positive > 5000)
select(covid_data, State, TotalSamples)
select(covid_data, c(State, TotalSamples))
select(covid_data, -Negative)
select(covid_data, State:Positive)
rename(covid_data, Neg = Negative)
covid_data
newdata <- mutate(covid_data, prop = Positive/TotalSamples)
newdata
arrange(covid_data, Date)
arrange(covid_data, desc(Positive))
write.csv(covid_data, file= "covid_data_copy.csv")
covid_data <- read.csv(file= "covid_data_copy.csv")
getwd() #current directory
list.files() # list all files in the directory
covid_data %>%
filter(State == 'Mizoram')
covid_data %>%
filter(State == "Mizoram") %>%
select(Date, Positive)
covid_data %>%
filter(State == "Mizoram") %>%
select(Date, Positive) ->
new_df
View(newdata)
View(new_df)
covid_data %>%
filter(State == "Mizoram") %>%
select(Date, Positive) ->
new_df
# Importing covid testing data
covid_testdata <- read.csv('StatewiseTestingDetails.csv')
# Using head function to view first few rows of the data
head(covid_testdata)
# Using nrow()  and ncol() base R functions to view the number of rows and columns for the data
nrow(covid_testdata)
ncol(covid_testdata)
sum(is.na(covid_testdata$Negative))
install.packages("tidyverse")
library(tidyverse)
# converting the data to tibble
covid_data <- as_tibble(covid_testdata)
covid_data
covid_data <- read_csv('StatewiseTestingDetails.csv')
covid_data
library(dplyr)
filter(covid_data, Positive > 5000)
filter(covid_data, State == 'Uttarakhand')
filter(covid_data, State == 'Uttarakhand' & Positive > 5000)
select(covid_data, State, TotalSamples)
select(covid_data, c(State, TotalSamples))
select(covid_data, -Negative)
select(covid_data, State:Positive)
rename(covid_data, Neg = Negative)
covid_data
newdata <- mutate(covid_data, prop = Positive/TotalSamples)
newdata
arrange(covid_data, Date)
arrange(covid_data, desc(Positive))
write.csv(covid_data, file= "covid_data_copy.csv")
covid_data <- read.csv(file= "covid_data_copy.csv")
getwd() #current directory
list.files() # list all files in the directory
covid_data %>%
filter(State == 'Mizoram')
covid_data %>%
filter(State == "Mizoram") %>%
select(Date, Positive)
install.packages("tidyverse")
# Importing covid testing data
covid_testdata <- read.csv('StatewiseTestingDetails.csv')
# Using head function to view first few rows of the data
head(covid_testdata)
# Using nrow()  and ncol() base R functions to view the number of rows and columns for the data
nrow(covid_testdata)
ncol(covid_testdata)
sum(is.na(covid_testdata$Negative))
#install.packages("tidyverse")
library(tidyverse)
# converting the data to tibble
covid_data <- as_tibble(covid_testdata)
covid_data
covid_data <- read_csv('StatewiseTestingDetails.csv')
covid_data
library(dplyr)
filter(covid_data, Positive > 5000)
filter(covid_data, State == 'Uttarakhand')
filter(covid_data, State == 'Uttarakhand' & Positive > 5000)
select(covid_data, State, TotalSamples)
select(covid_data, c(State, TotalSamples))
select(covid_data, -Negative)
select(covid_data, State:Positive)
rename(covid_data, Neg = Negative)
covid_data
newdata <- mutate(covid_data, prop = Positive/TotalSamples)
newdata
arrange(covid_data, Date)
arrange(covid_data, desc(Positive))
write.csv(covid_data, file= "covid_data_copy.csv")
covid_data <- read.csv(file= "covid_data_copy.csv")
getwd() #current directory
list.files() # list all files in the directory
covid_data %>%
filter(State == 'Mizoram')
covid_data %>%
filter(State == "Mizoram") %>%
select(Date, Positive)
covid_data %>%
filter(State == "Mizoram") %>%
select(Date, Positive) ->
new_df
knitr::opts_chunk$set(echo = TRUE)
# Loading the packages
library(tidyverse)
library(dplyr)
library(tibble)
library(ggplot2)
# Importing covid testing data using tibble read_csv function
covid_data <- read_csv('StatewiseTestingDetails.csv')
covid_data
## this drops the NA values from all rows
covid_data <- na.omit(covid_data)
View(covid_data)
state_data = filter(covid_data, State=='Delhi')
state_data = arrange(state_data,Date)
state_data
ggplot(state_data, aes(x=Date, y=Positive)) # + geom_point()
ggplot(state_data) + geom_text(mapping = aes(x=Date, y=Positive, label = Positive))
ggplot(state_data, aes(x=Date, y=Positive))  + geom_point()
ggplot(state_data) + geom_text(mapping = aes(x=Date, y=Positive, label = Positive))
ggsave('Delhi.png', width = 8, height = 6)
ggplot(state_data, aes(x=Date, y=Positive))  + geom_point(alpha = 0.2)
# geom is like adding a layer, you can add as many layer as you want with just a plus
# geom_point(alpha = 0.2) makes it maore transparent
ggplot(state_data, aes(x=Date, y=Positive))  + geom_point()
# geom is like adding a layer, you can add as many layer as you want with just a plus
# geom_point(alpha = 0.2) makes it maore transparent
ggplot(state_data, aes(x=Date, y=Positive))  + geom_point(alpha = 0.2)
# jittering of data is done to make it move a data point to see overlaping bits
ggplot(state_data, aes(x=Date, y=Positive))  + geom_jitter(width= 20, height= 20)
# jittering of data is done to make it move a data point to see overlaping bits
ggplot(state_data, aes(x=Date, y=Positive))  + geom_jitter(width= 1, height= 1)
ggplot(state_data, aes(x=Date, y=Positive))  + geom_jitter(width= 1, height= 1) + geom_point(alpha = 0.2)
ggplot(state_data, aes(x=Date, y=Positive))  + geom_jitter() + geom_point(alpha = 0.2)
# jittering of data is done to make it move a data point to see overlaping bits
ggplot(state_data, aes(x=Date, y=Positive))  + geom_jitter(width= 1, height= 1)
ggplot(state_data, aes(x=Date, y=Positive))  + geom_jitter() + geom_point(alpha = 0.2)
ggplot(state_data, aes(x=Date, y=Positive))  + geom_jitter() + geom_point(alpha = 0.2)
ggplot(state_data, aes(x=Date, y=Positive))  + geom_jitter() + geom_point(alpha = 0.2)
ggplot(state_data, aes(x=Date, y=Positive))  + geom_line()
ggplot(state_data, aes(x=Date, y=Positive))  + geom_line() + geom_jitter()
ggplot(state_data, aes(x=Date, y=Positive))  + geom_line()
plot1 <- ggplot(state_data) + geom_point(mapping = aes(x=Date, y=TotalSamples))
plot2 <- ggplot(state_data) + geom_point(mapping = aes(x=Date, y=Positive))
library(gridExtra)
grid.arrange(plot1, plot2, ncol = 2)
ggsave('Delhi.png', width = 8, height = 6)
ggplot(state_data, aes(x=Date, y=Positive))  + geom_histogram(alpha = 0.2)
ggplot(state_data, aes(x=Date, y=Positive))  + geom_histogram(bins = 10)
ggplot(state_data, aes(x=Date, y=Positive))  + geom_histogram( bins = 10)
ggplot(state_data, aes(x= positive))  + geom_histogram( bins = 10)
ggplot(state_data, aes(x= positive))  + geom_histogram( bins = 5)
ggplot( data = state_data, aes(x= positive))  + geom_histogram( bins = 5)
View(state_data)
ggplot( data = state_data, aes(x= Positive))  + geom_histogram( bins = 5)
ggplot( data = state_data, aes(x= Positive))  + geom_histogram( bins = 25)
ggplot( data = state_data, aes(x= Positive))  + geom_histogram( bins = 15)
ggplot( data = state_data, aes(x= Positive))  + geom_histogram( bins = 15 )
ggplot( data = state_data, aes(x= Positive))  + geom_histogram( bins = 10 )
ggplot( data = state_data, aes(x= Positive))  + geom_boxplot()
View(covid_data)
mystates_data = filter( covid_data, State == c('Delhi','Karnataka','Tamil Nadu', 'Uttar Pradesh'))
mystates_data = filter( covid_data, State = c('Delhi','Karnataka','Tamil Nadu', 'Uttar Pradesh'))
mystates_data <- filter( covid_data, State = c('Delhi','Karnataka','Tamil Nadu', 'Uttar Pradesh'))
mystates_data <- filter( covid_data, State == c('Delhi','Karnataka','Tamil Nadu', 'Uttar Pradesh'))
View(mystates_data)
mystates_data <- filter( covid_data, State == c('Delhi','Karnataka','Tamil Nadu', 'Uttar Pradesh'))
mystates_data <- filter( covid_data, State == c('Delhi','Karnataka','Tamil Nadu', 'Uttar Pradesh'))
ggplot( data = mystates_data, aes(x= factor(State) , y = Negative))  + geom_boxplot()
ggplot( data = mystates_data, aes(x= State, y = Positive))  + geom_col( )
ggplot(mpg, aes(x = displ, y = hwy, color = class)) + geom_point()
data(mpg)
?mpg
ggplot(mpg, aes(x = displ, y = hwy, color = class)) + geom_point() +
labs(title = "Fuel Efficiency by Engine Power",
subtitle = "Fuel economy data from 1999 and 2008 for 38 popular models of cars",
x = "Engine power (litres displacement)",
y = "Fuel Efficiency (miles per gallon)",
color = "Car Type") + theme_classic()
ggplot(mpg, aes(x = displ, y = hwy)) +
geom_point() +
facet_grid(year ~ cyl)
ggplot( data = mystates_data, aes(x= Positive))  + geom_histogram( bins = 10, color = 'white', fill = 'steelblue'  )
ggplot( data = mystates_data, aes(x= Positive))  + geom_histogram( bins = 10, color = 'white', fill = 'steelblue'  ) + facet_wrap(~State, nrow = 2)
ggsave('States.png', width = 8, height = 6)
data(mpg)
?mpg
head(mpg)
ggplot(mpg, aes(x = displ, y = hwy, color = year)) + geom_point()
ggplot(mpg, aes(x = displ, y = hwy, color = manufacturer)) + geom_point()
ggplot(mpg, aes(x = displ, y = hwy, color = class)) + geom_point() +
labs(title = "Fuel Efficiency by Engine Power",
subtitle = "Fuel economy data from 1999 and 2008 for 38 popular models of cars",
x = "Engine power (litres displacement)",
y = "Fuel Efficiency (miles per gallon)",
color = "Car Type") + theme_update()
ggplot(mpg, aes(x = displ, y = hwy, color = class)) + geom_point() +
labs(title = "Fuel Efficiency by Engine Power",
subtitle = "Fuel economy data from 1999 and 2008 for 38 popular models of cars",
x = "Engine power (litres displacement)",
y = "Fuel Efficiency (miles per gallon)",
color = "Car Type") + theme_mimimal()
ggplot(mpg, aes(x = displ, y = hwy, color = class)) + geom_point() +
labs(title = "Fuel Efficiency by Engine Power",
subtitle = "Fuel economy data from 1999 and 2008 for 38 popular models of cars",
x = "Engine power (litres displacement)",
y = "Fuel Efficiency (miles per gallon)",
color = "Car Type") + theme_minimal()
